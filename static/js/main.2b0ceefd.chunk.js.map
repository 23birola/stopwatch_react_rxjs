{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["observable$","interval","pipe","startWith","scan","time","App","useState","setTime","isClicked","setIsClicked","status","setStatus","interv","setInterv","className","Math","floor","slice","type","onClick","unsubscribe","subscribe","setTimeout","reset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAIMA,EAAcC,YAAS,KAAMC,KAAKC,YAAU,GAAIC,aAAK,SAAAC,GAAI,OAAEA,EAAK,MAEvD,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOF,EAAP,KAAaG,EAAb,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA4BH,mBAAS,GAArC,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAA4BL,mBAAS,GAArC,mBAAOM,EAAP,KAAeC,EAAf,KAuCA,OACE,sBAAKC,UAAU,cAAf,UACI,oBAAIA,UAAU,QAAd,uBACA,sBAAKA,UAAU,YAAf,UACE,sBAAMA,UAAU,OAAhB,UAAyB,IAAMC,KAAKC,MAAMZ,EAAI,OAAea,OAAO,KADtE,IAEE,sBAAMH,UAAU,OAAhB,UAAyB,IAAMC,KAAKC,MAAMZ,EAAO,KAAKa,OAAO,KAF/D,IAGE,sBAAMH,UAAU,OAAhB,UAAyB,IAAMC,KAAKC,MAAMZ,EAAO,KAAKa,OAAO,QAE/D,sBAAKH,UAAU,YAAf,UACE,wBAAQI,KAAK,SAASJ,UAAU,WAAWK,QA7CrC,WACZ,GAAe,IAAXT,EAKF,OAJAE,EAAOQ,cACPb,EAAQ,GACRI,EAAU,QACVE,EAAU,GAGZA,EAAUd,EAAYsB,UAAUd,IAChCI,EAAU,IAoCJ,wBACA,wBAAQO,KAAK,SAASJ,UAAU,WAAWK,QAlCtC,WACX,GAAIX,GACEI,EAID,OAHAA,EAAOQ,cACPX,GAAa,QACbE,EAAU,GAIfF,GAAa,GACba,YAAW,kBAAMb,GAAa,KAAQ,MAwBhC,kBACA,wBAAQS,KAAK,SAASJ,UAAU,WAAWK,QAAS,kBArB9C,WACZ,GAAIP,EAKF,OAJAA,EAAOQ,cACPb,EAAQ,GACRM,EAAUd,EAAYsB,UAAUd,SAChCI,EAAU,GAgBoDY,IAA1D,yBC5DV,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2b0ceefd.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport { interval, startWith, scan } from 'rxjs';\n\nconst observable$ = interval(1000).pipe(startWith(0), scan(time=>time+1));\n\nexport default function App() {\n  const [time, setTime] = useState(0);\n  const [isClicked, setIsClicked] = useState(false);\n  const [status, setStatus] = useState(0);\n  const [interv, setInterv] = useState(0);\n\n\n  const start = () => {\n    if (status === 1) {\n      interv.unsubscribe();\n      setTime(0);\n      setStatus(0);\n      setInterv(0);\n      return;\n    }\n    setInterv(observable$.subscribe(setTime));\n    setStatus(1);\n  };\n  \n  const wait = () => {\n    if (isClicked) {\n      if (interv) {\n         interv.unsubscribe();\n         setIsClicked(false);\n         setStatus(0);\n         return;\n       }\n    };\n    setIsClicked(true);\n    setTimeout(() => setIsClicked(false), 300);\n   \n }\n\n  const reset = () => {\n    if (interv) {\n      interv.unsubscribe();\n      setTime(0);\n      setInterv(observable$.subscribe(setTime));\n      setStatus(1);\n      return;\n    }\n  }\n\n  return (\n    <div className=\"stopwatcher\">\n        <h2 className=\"title\">STOPWATCH</h2>\n        <div className=\"clockFace\">\n          <span className=\"time\">{('0' + Math.floor(time / (60 * 60))).slice(-2)}</span>:\n          <span className=\"time\">{('0' + Math.floor(time / 60)).slice(-2)}</span>:\n          <span className=\"time\">{('0' + Math.floor(time % 60)).slice(-2)}</span>\n        </div>\n        <div className=\"clockBtns\">\n          <button type='button' className=\"clockBtn\" onClick={start}>Start/Stop</button>\n          <button type='button' className=\"clockBtn\" onClick={wait}>Wait</button>\n          <button type='button' className=\"clockBtn\" onClick={() => reset()}>Reset</button>\n        </div>\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}